'''
Created on 2021-05-31

@author: Bartosz Walewski
'''
from PyQt5 import QtCore, QtGui, QtWidgets
import json

from classes import Localization, HistoryLocalization
import data_operations
import api_operations as api


class UiMainWindow(QtWidgets.QMainWindow):

    def __init__(self):
        super().__init__()
        self.setupUi()

    def setupUi(self):
        self.setObjectName("MainWindow")
        self.resize(800, 600)
        self.setFixedSize(800, 600)
        font = QtGui.QFont()
        font.setFamily("Calibri Light")
        font.setPointSize(13)
        self.setFont(font)
        self.centralwidget = QtWidgets.QWidget()
        self.setWindowIcon(QtGui.QIcon("partly_cloudly_icon.png"))
        self.setWindowTitle("Prognoza pogody")
        self.centralwidget.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        self.centralwidget.setObjectName("centralwidget")
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self.centralwidget)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        self.menu_tools = QtWidgets.QMenu(self.menubar)
        self.menu_tools.setObjectName("menu_tools")
        self.setMenuBar(self.menubar)
        self.refresh_weather_action = QtWidgets.QAction()
        self.refresh_weather_action.setObjectName("refresh_weather_action")
        self.menu_tools.addAction(self.refresh_weather_action)
        self.menubar.addAction(self.menu_tools.menuAction())
        self.refresh_weather_action.setText("Odśwież")
        self.menu_tools.setTitle("Narzędzia")
        self.localization_search = QtWidgets.QAction()
        self.localization_search.setObjectName("localization_search")
        self.menu_tools.addAction(self.localization_search)
        self.localization_search.setText("Wyszukaj lokalizację")
        self.menu_options = QtWidgets.QMenu(self.menubar)
        self.menu_options.setObjectName("menu_options")
        self.menu_options.setTitle("Opcje")
        self.weather_history = QtWidgets.QAction()
        self.weather_history.setObjectName("weather_history")
        self.weather_history.setText("Historia z wybranego dnia")
        self.menu_options.addAction(self.weather_history)
        self.menubar.addMenu(self.menu_options)
        self.localization_search.triggered.connect(self.search_localization)
        self.refresh_weather_action.triggered.connect(self.refresh_weather)
        self.weather_history.triggered.connect(self.find_day_weather_history)
        self.main_layout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.main_layout.setContentsMargins(0, 0, 0, 0)
        self.main_layout.setSpacing(0)
        self.main_layout.setObjectName("main_layout")
        self.status_bar = QtWidgets.QStatusBar()
        self.status_bar.setObjectName("status_bar")
        self.setStatusBar(self.status_bar)
        self.status_bar.setSizeGripEnabled(False)
        self.current_weather_initialize()
        QtCore.QMetaObject.connectSlotsByName(self)
        self.show()

    def current_weather_initialize(self):
        self.today_widget = QtWidgets.QWidget(self.centralwidget)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        self.today_widget.setPalette(palette)
        self.today_widget.setAutoFillBackground(True)
        self.today_widget.setObjectName("today_widget")
        self.today_layout = QtWidgets.QVBoxLayout(self.today_widget)
        self.today_layout.setSizeConstraint(QtWidgets.QLayout.SetMaximumSize)
        self.today_layout.setContentsMargins(20, 20, 20, 30)
        self.today_layout.setSpacing(30)
        self.today_layout.setObjectName("today_layout")
        self.info_and_basic_weather_layout = QtWidgets.QHBoxLayout()
        self.info_and_basic_weather_layout.setSpacing(0)
        self.info_and_basic_weather_layout.setObjectName("info_and_basic_weather_layout")
        self.city_date_layout = QtWidgets.QVBoxLayout()
        self.city_date_layout.setContentsMargins(0, 45, 0, 45)
        self.city_date_layout.setSpacing(0)
        self.city_date_layout.setObjectName("city_date_layout")
        self.city_county_label = QtWidgets.QLabel(self.today_widget)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(15)
        self.city_county_label.setFont(font)
        self.city_county_label.setAlignment(QtCore.Qt.AlignCenter)
        self.city_county_label.setObjectName("city_county_label")
        self.city_date_layout.addWidget(self.city_county_label)
        self.current_day_label = QtWidgets.QLabel(self.today_widget)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(15)
        self.current_day_label.setFont(font)
        self.current_day_label.setAlignment(QtCore.Qt.AlignCenter)
        self.current_day_label.setObjectName("current_day_label")
        self.city_date_layout.addWidget(self.current_day_label)
        self.info_and_basic_weather_layout.addLayout(self.city_date_layout)
        self.temperature_wind_layout = QtWidgets.QVBoxLayout()
        self.temperature_wind_layout.setSpacing(0)
        self.temperature_wind_layout.setObjectName("temperature_wind_layout")
        self.current_temperature_label = QtWidgets.QLabel(self.today_widget)
        font = QtGui.QFont()
        font.setPointSize(50)
        self.current_temperature_label.setFont(font)
        self.current_temperature_label.setAlignment(QtCore.Qt.AlignCenter)
        self.current_temperature_label.setObjectName("current_temperature_label")
        self.temperature_wind_layout.addWidget(self.current_temperature_label)
        self.max_min_temperature_label = QtWidgets.QLabel(self.today_widget)
        self.max_min_temperature_label.setAlignment(QtCore.Qt.AlignCenter)
        self.max_min_temperature_label.setObjectName("max_min_temperature_label")
        self.temperature_wind_layout.addWidget(self.max_min_temperature_label)
        self.wind_info_label = QtWidgets.QLabel(self.today_widget)
        self.wind_info_label.setAlignment(QtCore.Qt.AlignCenter)
        self.wind_info_label.setObjectName("wind_info_label")
        self.temperature_wind_layout.addWidget(self.wind_info_label)
        self.info_and_basic_weather_layout.addLayout(self.temperature_wind_layout)
        self.big_weather_icon_label = QtWidgets.QLabel(self.today_widget)
        self.big_weather_icon_label.setEnabled(True)
        self.big_weather_icon_label.setScaledContents(True)
        self.big_weather_icon_label.setWordWrap(False)
        self.big_weather_icon_label.setObjectName("big_weather_icon_label")
        self.info_and_basic_weather_layout.addWidget(self.big_weather_icon_label)
        self.info_and_basic_weather_layout.setStretch(0, 100)
        self.info_and_basic_weather_layout.setStretch(1, 100)
        self.info_and_basic_weather_layout.setStretch(2, 57)
        self.today_layout.addLayout(self.info_and_basic_weather_layout)
        self.hourly_grid_layout = QtWidgets.QGridLayout()
        self.hourly_grid_layout.setSpacing(0)
        self.hourly_grid_layout.setObjectName("hourly_grid_layout")
        self.hourly_hours_list = []
        self.hourly_icons_list = []
        self.hourly_temperature_list = []
        for i in range(0, 6):
            self.hourly_hours_list.append(QtWidgets.QLabel(self.today_widget))
            self.hourly_hours_list[i].setAlignment(QtCore.Qt.AlignCenter)
            self.hourly_hours_list[i].setObjectName(f"hourly_hour{i}")
            self.hourly_grid_layout.addWidget(self.hourly_hours_list[i], 1, i, 1, 1)
            self.hourly_icons_list.append(QtWidgets.QLabel(self.today_widget))
            self.hourly_icons_list[i].setAlignment(QtCore.Qt.AlignCenter)
            self.hourly_grid_layout.addWidget(self.hourly_icons_list[i], 2, i, 1, 1)
            self.hourly_hours_list[i].setObjectName(f"hourly_icon{i}")
            self.hourly_temperature_list.append(QtWidgets.QLabel(self.today_widget))
            self.hourly_temperature_list[i].setAlignment(QtCore.Qt.AlignCenter)
            self.hourly_temperature_list[i].setObjectName(f"hourly_temperature{i}")
            self.hourly_grid_layout.addWidget(self.hourly_temperature_list[i], 3, i, 1, 1)
        self.today_layout.addLayout(self.hourly_grid_layout)
        self.today_layout.setStretch(0, 5)
        self.today_layout.setStretch(1, 3)
        self.main_layout.addWidget(self.today_widget)
        self.next_days_layout = QtWidgets.QHBoxLayout()
        self.next_days_layout.setSpacing(0)
        self.next_days_layout.setObjectName("next_days_layout")
        self.tomorrow_widget = QtWidgets.QWidget(self.centralwidget)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 85, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        self.tomorrow_widget.setPalette(palette)
        self.tomorrow_widget.setAutoFillBackground(True)
        self.tomorrow_widget.setObjectName("tomorrow_widget")
        self.tomorrow_layout_widget = QtWidgets.QWidget(self.tomorrow_widget)
        self.tomorrow_layout_widget.setGeometry(QtCore.QRect(0, 0, 400, 180))
        self.tomorrow_layout_widget.setObjectName("tomorrow_layout_widget")
        self.tomorrow_layout = QtWidgets.QVBoxLayout(self.tomorrow_layout_widget)
        self.tomorrow_layout.setContentsMargins(0, 0, 0, 0)
        self.tomorrow_layout.setSpacing(0)
        self.tomorrow_layout.setObjectName("tomorrow_layout")
        self.tomorrow_day_icon_layout = QtWidgets.QHBoxLayout()
        self.tomorrow_day_icon_layout.setSpacing(0)
        self.tomorrow_day_icon_layout.setObjectName("tomorrow_day_icon_layout")
        self.tomorrow_icon = QtWidgets.QLabel(self.tomorrow_layout_widget)
        self.tomorrow_icon.setWordWrap(False)
        self.tomorrow_icon.setObjectName("tomorrow_icon")
        self.tomorrow_day_icon_layout.addWidget(self.tomorrow_icon)
        self.tomorrow_day_label = QtWidgets.QLabel(self.tomorrow_layout_widget)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(15)
        self.tomorrow_day_label.setFont(font)
        self.tomorrow_day_label.setAlignment(QtCore.Qt.AlignCenter)
        self.tomorrow_day_label.setObjectName("tomorrow_day_label")
        self.tomorrow_day_icon_layout.addWidget(self.tomorrow_day_label)
        self.tomorrow_day_icon_layout.setStretch(0, 1)
        self.tomorrow_day_icon_layout.setStretch(1, 7)
        self.tomorrow_layout.addLayout(self.tomorrow_day_icon_layout)
        self.day_night_temp_layout = QtWidgets.QHBoxLayout()
        self.day_night_temp_layout.setSpacing(0)
        self.day_night_temp_layout.setObjectName("day_night_temp_layout")
        self.tomorrow_day_temp_label = QtWidgets.QLabel(self.tomorrow_layout_widget)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(35)
        self.tomorrow_day_temp_label.setFont(font)
        self.tomorrow_day_temp_label.setAlignment(QtCore.Qt.AlignCenter)
        self.tomorrow_day_temp_label.setObjectName("tomorrow_day_temp_label")
        self.day_night_temp_layout.addWidget(self.tomorrow_day_temp_label)
        self.tomorrow_night_temp_label = QtWidgets.QLabel(self.tomorrow_layout_widget)
        font = QtGui.QFont()
        font.setPointSize(35)
        self.tomorrow_night_temp_label.setFont(font)
        self.tomorrow_night_temp_label.setAlignment(QtCore.Qt.AlignCenter)
        self.tomorrow_night_temp_label.setObjectName("tomorrow_night_temp_label")
        self.day_night_temp_layout.addWidget(self.tomorrow_night_temp_label)
        self.tomorrow_layout.addLayout(self.day_night_temp_layout)
        self.tomorrow_wind_info_label = QtWidgets.QLabel(self.tomorrow_layout_widget)
        self.tomorrow_wind_info_label.setAlignment(QtCore.Qt.AlignCenter)
        self.tomorrow_wind_info_label.setObjectName("tomorrow_wind_info_label")
        self.tomorrow_layout.addWidget(self.tomorrow_wind_info_label)
        self.next_days_layout.addWidget(self.tomorrow_widget)
        self.day_after_tommorow_widget = QtWidgets.QWidget(self.centralwidget)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        self.day_after_tommorow_widget.setPalette(palette)
        self.day_after_tommorow_widget.setAutoFillBackground(True)
        self.day_after_tommorow_widget.setObjectName("day_after_tommorow_widget")
        self.day_after_tomorrow_layout_widget = QtWidgets.QWidget(self.day_after_tommorow_widget)
        self.day_after_tomorrow_layout_widget.setGeometry(QtCore.QRect(0, 0, 401, 182))
        self.day_after_tomorrow_layout_widget.setObjectName("day_after_tomorrow_layout_widget")
        self.day_after_tomorrow_layout = QtWidgets.QVBoxLayout(self.day_after_tomorrow_layout_widget)
        self.day_after_tomorrow_layout.setContentsMargins(0, 0, 0, 0)
        self.day_after_tomorrow_layout.setSpacing(0)
        self.day_after_tomorrow_layout.setObjectName("day_after_tomorrow_layout")
        self.day_after_tomorrow_day_icon_layout = QtWidgets.QHBoxLayout()
        self.day_after_tomorrow_day_icon_layout.setSpacing(0)
        self.day_after_tomorrow_day_icon_layout.setObjectName("day_after_tomorrow_day_icon_layout")
        self.day_after_tomorrow_icon = QtWidgets.QLabel(self.day_after_tomorrow_layout_widget)
        self.day_after_tomorrow_icon.setAlignment(QtCore.Qt.AlignCenter)
        self.day_after_tomorrow_icon.setObjectName("day_after_tomorrow_icon")
        self.day_after_tomorrow_day_icon_layout.addWidget(self.day_after_tomorrow_icon)
        self.day_after_tomorrow_day_label = QtWidgets.QLabel(self.day_after_tomorrow_layout_widget)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(15)
        self.day_after_tomorrow_day_label.setFont(font)
        self.day_after_tomorrow_day_label.setAlignment(QtCore.Qt.AlignCenter)
        self.day_after_tomorrow_day_label.setObjectName("tomorrow_day_label")
        self.day_after_tomorrow_day_icon_layout.addWidget(self.day_after_tomorrow_day_label)
        self.day_after_tomorrow_day_icon_layout.setStretch(0, 1)
        self.day_after_tomorrow_day_icon_layout.setStretch(1, 7)
        self.day_after_tomorrow_layout.addLayout(self.day_after_tomorrow_day_icon_layout)
        self.day_after_tomorrow_temp_layout = QtWidgets.QHBoxLayout()
        self.day_after_tomorrow_temp_layout.setSpacing(0)
        self.day_after_tomorrow_temp_layout.setObjectName("day_after_tomorrow_temp_layout")
        self.day_after_tomorrow_day_temp_label = QtWidgets.QLabel(self.day_after_tomorrow_layout_widget)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(35)
        self.day_after_tomorrow_day_temp_label.setFont(font)
        self.day_after_tomorrow_day_temp_label.setAlignment(QtCore.Qt.AlignCenter)
        self.day_after_tomorrow_day_temp_label.setObjectName("day_after_tomorrow_day_temp_label")
        self.day_after_tomorrow_temp_layout.addWidget(self.day_after_tomorrow_day_temp_label)
        self.day_after_tomorrow_night_temp_label = QtWidgets.QLabel(self.day_after_tomorrow_layout_widget)
        font = QtGui.QFont()
        font.setPointSize(35)
        self.day_after_tomorrow_night_temp_label.setFont(font)
        self.day_after_tomorrow_night_temp_label.setAlignment(QtCore.Qt.AlignCenter)
        self.day_after_tomorrow_night_temp_label.setObjectName("day_after_tomorrow_night_temp_label")
        self.day_after_tomorrow_temp_layout.addWidget(self.day_after_tomorrow_night_temp_label)
        self.day_after_tomorrow_layout.addLayout(self.day_after_tomorrow_temp_layout)
        self.day_after_tomorrow_wind_label = QtWidgets.QLabel(self.day_after_tomorrow_layout_widget)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.day_after_tomorrow_wind_label.setFont(font)
        self.day_after_tomorrow_wind_label.setAlignment(QtCore.Qt.AlignCenter)
        self.day_after_tomorrow_wind_label.setObjectName("day_after_tomorrow_wind_label")
        self.day_after_tomorrow_layout.addWidget(self.day_after_tomorrow_wind_label)
        self.next_days_layout.addWidget(self.day_after_tommorow_widget)
        self.next_days_layout.setStretch(0, 1)
        self.next_days_layout.setStretch(1, 1)
        self.main_layout.addLayout(self.next_days_layout)
        self.main_layout.setStretch(0, 2)
        self.main_layout.setStretch(1, 1)

    def current_weather_data(self, localization):
        self.city_county_label.setText(f"{localization.city()}, {localization.country()}")
        self.current_day_label.setText(f"{data_operations.week_day(localization.date())}, {localization.date()}")
        self.current_temperature_label.setText(f"{localization.current_temperature()}°C")
        self.max_min_temperature_label.setText(f"Max: {localization.max_temperature()}°C, Min: {localization.min_temperature()}°C")
        self.wind_info_label.setText(f"Wiatr: {localization.wind_direction()} {localization.wind_speed()}km/h")
        self.tomorrow_day_label.setText(f"{data_operations.week_day(localization.date(), 1)}")
        self.tomorrow_day_temp_label.setText(f"{localization.weather_tomorrow().max_temperature()}°C")
        self.tomorrow_night_temp_label.setText(f"{localization.weather_tomorrow().min_temperature()}°C")
        self.tomorrow_wind_info_label.setText(f"Wiatr do {localization.weather_tomorrow().wind_speed()}km/h")
        self.day_after_tomorrow_day_label.setText(f"{data_operations.week_day(localization.date(), 2)}")
        self.day_after_tomorrow_day_temp_label.setText(f"{localization.weather_day_after_tomorrow().max_temperature()}°C")
        self.day_after_tomorrow_night_temp_label.setText(f"{localization.weather_day_after_tomorrow().min_temperature()}°C")
        self.day_after_tomorrow_wind_label.setText(f"Wiatr do {localization.weather_day_after_tomorrow().wind_speed()}km/h")
        image = api.get_icon(localization.weather_icon())
        if image:
            self.big_weather_icon_label.setPixmap(QtGui.QPixmap(image))
            self.status_bar.showMessage("")
        else:
            self.status_bar.showMessage("Błąd ładowania ikony pogody: problem z połączeniem do serwera")
        image = api.get_icon(localization.weather_tomorrow().weather_icon())
        if image:
            self.tomorrow_icon.setPixmap(QtGui.QPixmap(image))
            self.status_bar.showMessage("")
        else:
            self.status_bar.showMessage("Błąd ładowania ikony pogody: problem z połączeniem do serwera")
        image = api.get_icon(localization.weather_day_after_tomorrow().weather_icon())
        if image:
            self.day_after_tomorrow_icon.setPixmap(QtGui.QPixmap(image))
            self.status_bar.showMessage("")
        else:
            self.status_bar.showMessage("Błąd ładowania ikony pogody: problem z połączeniem do serwera")
        time = localization.time().hour
        for i in range(0, 6):
            next_day_flag = False
            if time > 23:
                time = 0
                next_day_flag = True
            self.hourly_hours_list[i].setText(f"{time}:00")
            if not next_day_flag:
                image = api.get_icon(localization.weather_today().hour_icon(time))
                if image:
                    self.hourly_icons_list[i].setPixmap(QtGui.QPixmap(image))
                    self.status_bar.showMessage("")
                else:
                    self.status_bar.showMessage("Błąd ładowania ikony pogody: problem z połączeniem do serwera")
                self.hourly_temperature_list[i].setText(f"{localization.weather_today().hour_temp(time)}°C")
            else:
                image = api.get_icon(localization.weather_tomorrow().hour_icon(time))
                if image:
                    self.hourly_icons_list[i].setPixmap(QtGui.QPixmap(image))
                    self.status_bar.showMessage("")
                else:
                    self.status_bar.showMessage("Błąd ładowania ikony pogody: problem z połączeniem do serwera")
                self.hourly_temperature_list[i].setText(f"{localization.weather_tomorrow().hour_temp(time)}°C")
            time += 1

    def initialize_weather_history(self):
        self.menubar.hide()
        self.today_widget.hide()
        self.tomorrow_widget.hide()
        self.day_after_tommorow_widget.hide()
        self.history_widget = QtWidgets.QWidget(self.centralwidget)
        self.history_widget.setGeometry(QtCore.QRect(0, 0, 800, 580))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(65, 91, 134))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        self.history_widget.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Calibri Light")
        font.setPointSize(13)
        self.history_widget.setFont(font)
        self.history_widget.setAutoFillBackground(True)
        self.history_widget.setObjectName("history_widget")
        self.history_widget_layout = QtWidgets.QWidget(self.history_widget)
        self.history_widget_layout.setGeometry(QtCore.QRect(0, 0, 801, 561))
        self.history_widget_layout.setObjectName("history_widget_layout")
        self.history_layout = QtWidgets.QVBoxLayout(self.history_widget_layout)
        self.history_layout.setSizeConstraint(QtWidgets.QLayout.SetMaximumSize)
        self.history_layout.setContentsMargins(20, 40, 20, 30)
        self.history_layout.setSpacing(40)
        self.history_layout.setObjectName("history_layout")
        self.title_label = QtWidgets.QLabel(self.history_widget_layout)
        font = QtGui.QFont()
        font.setPointSize(30)
        self.title_label.setFont(font)
        self.title_label.setAlignment(QtCore.Qt.AlignCenter)
        self.title_label.setText("Historia pogody")
        self.title_label.setObjectName("title_label")
        self.history_layout.addWidget(self.title_label)
        self.history_info_label = QtWidgets.QHBoxLayout()
        self.history_info_label.setSpacing(0)
        self.history_info_label.setObjectName("history_info_label")
        self.history_city_date_layout = QtWidgets.QVBoxLayout()
        self.history_city_date_layout.setSpacing(0)
        self.history_city_date_layout.setContentsMargins(0, 20, 0, 20)
        self.history_city_date_layout.setObjectName("history_city_date_layout")
        self.history_city_date_label = QtWidgets.QLabel(self.history_widget_layout)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(15)
        self.history_city_date_label.setFont(font)
        self.history_city_date_label.setAlignment(QtCore.Qt.AlignCenter)
        self.history_city_date_label.setObjectName("history_city_date_label")
        self.history_city_date_layout.addWidget(self.history_city_date_label)
        self.history_day_label = QtWidgets.QLabel(self.history_widget_layout)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(15)
        self.history_day_label.setFont(font)
        self.history_day_label.setAlignment(QtCore.Qt.AlignCenter)
        self.history_day_label.setObjectName("history_day_label")
        self.history_city_date_layout.addWidget(self.history_day_label)
        self.history_info_label.addLayout(self.history_city_date_layout)
        self.history_temp_wind_layout = QtWidgets.QVBoxLayout()
        self.history_temp_wind_layout.setSpacing(0)
        self.history_temp_wind_layout.setObjectName("history_temp_wind_layout")
        self.history_avg_temp_layout = QtWidgets.QHBoxLayout()
        self.history_avg_temp_layout.setSpacing(15)
        self.history_avg_temp_layout.setObjectName("history_avg_temp_layout")
        self.history_avg_label = QtWidgets.QLabel(self.history_widget_layout)
        self.history_avg_label.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.history_avg_label.setObjectName("history_avg_label")
        self.history_avg_temp_layout.addWidget(self.history_avg_label)
        self.history_avg_temp_label = QtWidgets.QLabel(self.history_widget_layout)
        font = QtGui.QFont()
        font.setPointSize(25)
        self.history_avg_temp_label.setFont(font)
        self.history_avg_temp_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.history_avg_temp_label.setObjectName("history_avg_temp_label")
        self.history_avg_temp_layout.addWidget(self.history_avg_temp_label)
        self.history_temp_wind_layout.addLayout(self.history_avg_temp_layout)
        self.history_max_min_temp_label = QtWidgets.QLabel(self.history_widget_layout)
        self.history_max_min_temp_label.setAlignment(QtCore.Qt.AlignCenter)
        self.history_max_min_temp_label.setObjectName("history_max_min_temp_label")
        self.history_temp_wind_layout.addWidget(self.history_max_min_temp_label)
        self.history_wind_info_label = QtWidgets.QLabel(self.history_widget_layout)
        self.history_wind_info_label.setAlignment(QtCore.Qt.AlignCenter)
        self.history_wind_info_label.setObjectName("history_wind_info_label")
        self.history_temp_wind_layout.addWidget(self.history_wind_info_label)
        self.history_info_label.addLayout(self.history_temp_wind_layout)
        self.history_weather_icon = QtWidgets.QLabel(self.history_widget_layout)
        self.history_weather_icon.setScaledContents(True)
        self.history_weather_icon.setObjectName("history_weather_icon")
        self.history_info_label.addWidget(self.history_weather_icon)
        self.history_info_label.setStretch(0, 100)
        self.history_info_label.setStretch(1, 100)
        self.history_info_label.setStretch(2, 57)
        self.history_layout.addLayout(self.history_info_label)
        self.history_hour_grid = QtWidgets.QGridLayout()
        self.history_hour_grid.setSpacing(0)
        self.history_hour_grid.setObjectName("history_hour_grid")
        self.history_hours_list = []
        self.history_icons_list = []
        self.history_temperature_list = []
        for i in range(0, 6):
            self.history_hours_list.append(QtWidgets.QLabel(self.today_widget))
            self.history_hours_list[i].setAlignment(QtCore.Qt.AlignCenter)
            self.history_hours_list[i].setObjectName(f"history_hour{i}")
            self.history_hour_grid.addWidget(self.history_hours_list[i], 1, i, 1, 1)
            self.history_icons_list.append(QtWidgets.QLabel(self.today_widget))
            self.history_icons_list[i].setAlignment(QtCore.Qt.AlignCenter)
            self.history_hour_grid.addWidget(self.history_icons_list[i], 2, i, 1, 1)
            self.history_hours_list[i].setObjectName(f"history_icon{i}")
            self.history_temperature_list.append(QtWidgets.QLabel(self.today_widget))
            self.history_temperature_list[i].setAlignment(QtCore.Qt.AlignCenter)
            self.history_temperature_list[i].setObjectName(f"history_temperature{i}")
            self.history_hour_grid.addWidget(self.history_temperature_list[i], 3, i, 1, 1)
        self.history_layout.addLayout(self.history_hour_grid)
        self.history_to_weather_back_button = QtWidgets.QPushButton(self.history_widget)
        self.history_to_weather_back_button.setObjectName("history_to_weather_back_button")
        self.history_to_weather_back_button.setText("Powrót do aktualnej pogody")
        self.history_to_weather_back_button.clicked.connect(self.go_back_to_current_weather)
        self.history_layout.addWidget(self.history_to_weather_back_button)
        self.history_layout.setStretch(0, 1)
        self.history_layout.setStretch(1, 4)
        self.history_layout.setStretch(2, 3)
        self.history_layout.setStretch(3, 1)
        self.history_widget.show()

    def history_weather_data(self, localization):
        self.history_city_date_label.setText(f"{localization.city()}, {localization.country()}")
        self.history_day_label.setText(f"{data_operations.week_day(localization.date())}, {localization.date()}")
        self.history_avg_temp_label.setText(f"{localization.avarag_temperature()}°C")
        self.history_avg_label.setText("Średnia:")
        self.history_max_min_temp_label.setText(f"Max: {localization.max_temperature()}°C, Min: {localization.min_temperature()}°C")
        self.history_wind_info_label.setText(f"Max prędkość wiatru: {localization.max_wind_speed()}km/h")
        self.history_day_label.setText(f"{data_operations.week_day(localization.date(), 1)}, {localization.date()}")
        image = api.get_icon(localization.weather_icon())
        if image:
            self.history_weather_icon.setPixmap(QtGui.QPixmap(image))
            self.status_bar.showMessage("")
        else:
            self.status_bar.showMessage("Błąd ładowania ikony pogody: problem z połączeniem do serwera")
        for i in range(0, 6):
            self.history_hours_list[i].setText(f"{i*4}:00")
            image = api.get_icon(localization.weather_that_day().hour_icon(i*4))
            if image:
                self.history_icons_list[i].setPixmap(QtGui.QPixmap(image))
                self.status_bar.showMessage("")
            else:
                self.status_bar.showMessage("Błąd ładowania ikony pogody: problem z połączeniem do serwera")
            self.history_temperature_list[i].setText(f"{localization.weather_that_day().hour_temp(i*4)}°C")

    def search_localization(self):
        self.today_widget.hide()
        self.tomorrow_widget.hide()
        self.day_after_tommorow_widget.hide()
        self.city_name_holder = QtWidgets.QLineEdit(self.centralwidget)
        self.city_name_holder.setGeometry(QtCore.QRect(250, 100, 300, 30))
        self.city_name_holder.show()
        self.city_tell_to_give = QtWidgets.QLabel(self.centralwidget)
        self.city_tell_to_give.setGeometry(QtCore.QRect(0, 50, 800, 30))
        self.city_tell_to_give.setText("Podaj miasto")
        self.city_tell_to_give.setAlignment(QtCore.Qt.AlignCenter)
        self.city_tell_to_give.show()
        self.accept_city_name_button = QtWidgets.QPushButton(self.centralwidget)
        self.accept_city_name_button.setGeometry(QtCore.QRect(175, 150, 200, 30))
        self.accept_city_name_button.setText("Zatwierdź")
        self.accept_city_name_button.show()
        self.accept_city_name_button.clicked.connect(self.accept_given_city_search)
        self.cencel_city_search_button = QtWidgets.QPushButton(self.centralwidget)
        self.cencel_city_search_button.setGeometry(QtCore.QRect(425, 150, 200, 30))
        self.cencel_city_search_button.setText("Anuluj")
        self.cencel_city_search_button.show()
        self.cencel_city_search_button.clicked.connect(self.go_back_to_weather)

    def accept_given_city_search(self):
        if not self.city_name_holder.text():
            self.status_bar.showMessage("Najpierw wpisz miasto!")
        else:
            resp = api.search_localization(self.city_name_holder.text())
            if resp:
                self.locations_list_searched = QtWidgets.QComboBox(self.centralwidget)
                self.locations_list_searched.setGeometry(QtCore.QRect(50, 50, 700, 50))
                self.locations_list_searched.show()
                for el in resp:
                    self.locations_list_searched.addItem(el["name"])
                self.accept_city_name_button.hide()
                self.city_tell_to_give.hide()
                self.city_name_holder.hide()
                self.city_searched_accept_button = QtWidgets.QPushButton(self.centralwidget)
                self.city_searched_accept_button.setGeometry(QtCore.QRect(175, 150, 200, 30))
                self.city_searched_accept_button.show()
                self.city_searched_accept_button.setText("Zatwierdź wybór")
                self.city_searched_accept_button.clicked.connect(self.show_new_localization)
                self.cencel_city_search_button.setGeometry(QtCore.QRect(425, 150, 200, 30))
                self.status_bar.showMessage("")
            else:
                self.status_bar.showMessage("Brak wyników!")

    def show_new_localization(self):
        self.locations_list_searched.hide()
        self.city_searched_accept_button.hide()
        self.cencel_city_search_button.hide()
        self.status_bar.showMessage("")
        searched = self.locations_list_searched.currentText()
        searched = searched.split(",", 1)
        if searched[0]:
            searched = searched[0]
        self.today_widget.show()
        self.tomorrow_widget.show()
        self.day_after_tommorow_widget.show()
        request = api.get_weather(searched)
        if request:
            localization = Localization(request)
            self.current_weather_data(localization)
            self.status_bar.showMessage("")
        else:
            self.status_bar.showMessage("Błąd!")

    def refresh_weather(self):
        with open("current_city.json", "r") as read:
            city = json.load(read)
        weather = api.get_weather(city)
        if weather:
            self.current_weather_data(Localization(weather))
            self.status_bar.showMessage("Odświeżono pomyślnie")
        else:
            self.status_bar.showMessage("Problem z uzyskaniem odpowiedzi z serwera")

    def go_back_to_weather(self):
        if hasattr(self, "locations_list_searched"):
            self.locations_list_searched.hide()
        if hasattr(self, "city_searched_accept_button"):
            self.city_searched_accept_button.hide()
        if hasattr(self, "cencel_city_search_button"):
            self.cencel_city_search_button.hide()
        self.accept_city_name_button.hide()
        self.city_tell_to_give.hide()
        self.city_name_holder.hide()
        self.today_widget.show()
        self.tomorrow_widget.show()
        self.day_after_tommorow_widget.show()

    def go_back_to_current_weather(self):
        self.history_widget.hide()
        self.today_widget.show()
        self.tomorrow_widget.show()
        self.day_after_tommorow_widget.show()
        self.menubar.show()

    def find_day_weather_history(self):
        self.today_widget.hide()
        self.tomorrow_widget.hide()
        self.day_after_tommorow_widget.hide()
        self.menubar.hide()
        self.chose_data_label = QtWidgets.QLabel(self.centralwidget)
        self.chose_data_label.setGeometry(250, 50, 300, 50)
        self.chose_data_label.setText("Wybierz datę")
        self.chose_data_label.setAlignment(QtCore.Qt.AlignCenter)
        self.chose_data_label.setObjectName("chose_data_label")
        self.chose_data_label.show()
        self.calenar_history = QtWidgets.QDateEdit(self.centralwidget)
        self.calenar_history.setObjectName("calenar_history")
        self.calenar_history.setGeometry(250, 100, 300, 30)
        date_min = QtCore.QDateTime.currentDateTime().addDays(-7)
        date_max = QtCore.QDateTime.currentDateTime().addDays(-1)
        self.calenar_history.setDateTimeRange(date_min, date_max)
        self.calenar_history.setCalendarPopup(True)
        self.calenar_history.show()
        self.accept_date_button = QtWidgets.QPushButton(self.centralwidget)
        self.accept_date_button.setGeometry(QtCore.QRect(175, 400, 200, 30))
        self.accept_date_button.setText("Zatwierdź")
        self.accept_date_button.setObjectName("accept_date_button")
        self.accept_date_button.show()
        self.accept_date_button.clicked.connect(self.accept_date_choose)
        self.cancel_history_chose_button = QtWidgets.QPushButton(self.centralwidget)
        self.cancel_history_chose_button.setGeometry(QtCore.QRect(425, 400, 200, 30))
        self.cancel_history_chose_button.setText("Anuluj")
        self.cancel_history_chose_button.setObjectName("cancel_history_chose_button")
        self.cancel_history_chose_button.show()
        self.cancel_history_chose_button.clicked.connect(self.cancel_date_selection)

    def accept_date_choose(self):
        resp = api.get_history_weather(f"{self.calenar_history.date().year()}-{self.calenar_history.date().month()}-{self.calenar_history.date().day()}")
        if resp:
            self.chose_data_label.hide()
            self.calenar_history.hide()
            self.accept_date_button.hide()
            self.cancel_history_chose_button.hide()
            self.initialize_weather_history()
            self.history_weather_data(HistoryLocalization(resp))
        else:
            self.chose_data_label.hide()
            self.calenar_history.hide()
            self.accept_date_button.hide()
            self.cancel_history_chose_button.hide()
            self.today_widget.show()
            self.tomorrow_widget.show()
            self.day_after_tommorow_widget.show()
            self.menubar.show()

    def cancel_date_selection(self):
        self.chose_data_label.hide()
        self.calenar_history.hide()
        self.accept_date_button.hide()
        self.cancel_history_chose_button.hide()
        self.today_widget.show()
        self.tomorrow_widget.show()
        self.day_after_tommorow_widget.show()
        self.menubar.show()

def load_weather():
    with open("current_city.json", "r") as read:
            city = json.load(read)
    weather = api.get_weather(city)
    if weather:
        ui.current_weather_data(Localization(weather))
    else:
        with open("current_weather.json", "r") as read:
            saved_data = json.load(read)
        ui.current_weather_data(Localization(saved_data))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = UiMainWindow()
    load_weather()
    sys.exit(app.exec_())

